trigger:
  branches:
    include:
      - 'feature/*'
      - 'master'
  tags:
    include:
      - '*'

pool:
  vmImage: "ubuntu-latest"


variables:
  docker_registry_service_connection: "d46a8808-46ca-4d98-8cf4-ec41c18db25b"
  azure_subsription_connection: "07c271cc-de0c-4b27-85c7-3f2059328355"
  docker_repository: "{{cookiecutter.project_slug}}"
  isMaster: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))]
  isTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  ${% raw %}{{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}{% endraw %}:
    image_tag: latest
  ${% raw %}{{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}{% endraw %}:
    image_tag: $[variables['Build.SourceBranchName']]
  ${% raw %}{{ if not(or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))) }}{% endraw %}:
    image_tag: $[variables['Build.SourceVersion']]

jobs:
  - job: Build
    steps:
      - checkout: self
        fetchDepth: 3
        clean: true
      - script: echo "##vso[task.setvariable variable=environment]prod"
        displayName: Set environment to PROD
        condition: eq(variables.isTag, true)
      - task: Docker@2
        displayName: Build image to container registry
        inputs:
          command: buildAndPush
          repository: $(docker_repository)
          dockerfile: $(Build.SourcesDirectory)/Dockerfile
          containerRegistry: $(docker_registry_service_connection)
          tags: |
            $(image_tag)
            $(Build.BuildId)
  - job: Deploy
    dependsOn: Build
    variables:
      environment: dev
      vault_name: kv-dev-main
    steps:
      - checkout: self
        fetchDepth: 3
        clean: true
        path: src
      - checkout: git://ODP/app-deployer
        clean: true
        path: app-deployer
      - script: echo "##vso[task.setvariable variable=environment]prod"
        displayName: Set environment tag to PROD
        condition: or(eq(variables.isMaster, true), eq(variables.isTag, true))
      - script: echo "##vso[task.setvariable variable=vault_name]kv-${ENVIRONMENT}-main"
        displayName: Set Azure Vault name
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "{{cookiecutter.python_version}}"
      - script: python -m pip install -U pip setuptools wheel
        displayName: Install and update PIP
      - script: python -m pip install poetry
        displayName: Install and Poetry
      - script: cd ../app-deployer && poetry install
        displayName: Install dependencies
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: $(azure_subsription_connection)
          KeyVaultName: $(vault_name)
          SecretsFilter: "eas-config-token-encrypt,eas-config-token-sign,eas-encrypt-iv-secret,eas-traefik-client-password"
      - task: AzureCLI@2
        displayName: Deploy app
        inputs:
          azureSubscription: $(azure_subsription_connection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az --version
            az aks get-credentials --resource-group rg-$(environment)-kubernetes --name arck-$(environment)-odp
            cd ../app-deployer && poetry run python -m odp.app.deployer -f ../src/deployment_config.yml --env-name=$(environment) --update-if-exists --image-tag=$(image_tag)
        env:
          PROXY_SSL_DOMAIN: "*.$(environment).oceandata.xyz"
          PROXY_CERT_RESOLVER: letsencrypt
          AUTH_EAS_URL: "eas.$(environment).oceandata.xyz"
          AUTH_DOMAIN: "$(environment).oceandata.xyz"
          EAS_CLIENT_SECRET: $(eas-traefik-client-password)
          EAS_ENCRYPT_SECRET: $(eas-config-token-encrypt)
          EAS_SIGN_SECRET: $(eas-config-token-sign)
          EAS_IV_SECRET: $(eas-encrypt-iv-secret)
          MANAGED_BY: "cicd-agent"

